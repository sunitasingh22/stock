openapi: 3.0.3
info:
  title: Stock Portfolio Management Service API
  description: API to manage a user's stock portfolio (add, remove, and list stocks).
  version: 1.0.0
servers:
  - url: http://localhost:8081/
    description: Local Server

paths:
  /stocks/{userId}:
    get:
      summary: Get all stocks by user ID
      description: Retrieve all stocks associated with a given user ID.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          description: ID of the user
      responses:
        '200':
          description: List of stocks for the specified user ID
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StockList'
        '404':
          description: No stocks found for the specified user ID

  /stocks/{userId}/{stockId}:
    post:
      summary: Add stock to user's portfolio
      description: Add a specific stock to the portfolio of a given user.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          description: ID of the user
        - name: stockId
          in: path
          required: true
          schema:
            type: integer
          description: ID of the stock
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InsertStockRequest'
      responses:
        '204':
          description: Stock added successfully
        '404':
          description: Stock or user not found

  /stocks/{userId}/{stockId}/{quantity}:
    put:
      summary: Remove stock from user's portfolio
      description: Remove a specified quantity of stock from a user's portfolio.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          description: ID of the user
        - name: stockId
          in: path
          required: true
          schema:
            type: integer
          description: ID of the stock
        - name: quantity
          in: path
          required: true
          schema:
            type: integer
          description: Quantity of the stock to remove
      responses:
        '204':
          description: Stock removed successfully
        '404':
          description: Stock or user not found

  /stocks/all:
    get:
      summary: Get all available stocks
      description: Retrieve a list of all available stocks.
      responses:
        '200':
          description: List of all stocks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StockList'
        '404':
          description: No stocks found  

  /portfolio/{userId}:
    get:
      summary: Get portfolio by user ID
      description: Retrieve the portfolio details for a specific user, including stocks and quantities.
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
          description: ID of the user
      responses:
        '200':
          description: List of portfolio details for the specified user ID
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Portfolio'
        '404':
          description: Portfolio not found for the specified user ID

  /users/adduser:
    post:
      summary: Add a new user
      tags:
        - Users
      operationId: addUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Users'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '204':
          description: User created successfully with no content
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Email already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /users/login:
    post:
      summary: User login
      tags:
        - Users
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Login successful"
        '401':
          description: Unauthorized - incorrect credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid username or password"
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  parameters:
    userId:
      name: userId
      in: path
      description: User ID
      schema:
        type: integer
        format: int64
      required: true
    stockId:
      name: stockId
      in: path
      description: Stock ID
      schema:
        type: integer
        format: int64
      required: true
    quantity:
      name: quantity
      in: path
      description: Stocks Quantity
      schema:
        type: integer
        format: int64
      required: true
      
  schemas:
    InsertStockRequest:
      type: object
      description: Request object to insert the stock into the portfolio
      required:
        - quantity
      properties:
        quantity:
          type: integer
          minLength: 1
          maxLength: 1000
          example: 20
      additionalProperties: false
      
    Portfolio:
      type: object
      description: Portfolio entry for a user
      properties:
        id:
          type: integer
          example: 1
        user:
          $ref: '#/components/schemas/Users'
        stock:
          $ref: '#/components/schemas/StockList'
        quantity:
          type: integer
          example: 20

    Users:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: sunita
        email:
          type: string
          example: sunita@gmail.com
        password:
          type: string
          example: sunita
          
    StockList:
      type: object
      properties:
        id:
          type: integer
          example: 1
        symbol:
          type: string
          example: AAPL
        name:
          type: string
          example: Apple Inc
        
    UserLogin:
      type: object
      description: User login request information
      properties:
        username:
          type: string
          example: "sunita"
        password:
          type: string
          example: "sunita"
  
    

    Error:
      type: object
      properties:
        code:
          type: integer
          example: 404
        message:
          type: string
          example: Stock/Portfolio not found
